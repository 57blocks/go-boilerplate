// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package httpsrv

import (
	"context"
	"contrib.go.opencensus.io/exporter/stackdriver/monitoredresource"
	"github.com/57blocks/go-boilerplate/internal/handler/ping"
	"go.opencensus.io/trace"
	"gocloud.dev/aws"
	"gocloud.dev/gcp"
	"gocloud.dev/server"
	"gocloud.dev/server/requestlog"
	"gocloud.dev/server/sdserver"
	"gocloud.dev/server/xrayserver"
)

// Injectors from inject_aws.go:

func SetupAWS(ctx context.Context) (*server.Server, func(), error) {
	resource := ping.New()
	httpsrvResources := &resources{
		ping: resource,
	}
	handler := setupHandler(httpsrvResources)
	ncsaLogger := xrayserver.NewRequestLogger()
	v, cleanup := appHealthChecks()
	session, err := aws.NewDefaultSession()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	xRay := xrayserver.NewXRayClient(session)
	exporter, cleanup2, err := xrayserver.NewExporter(xRay)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	sampler := trace.AlwaysSample()
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         ncsaLogger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		DefaultSamplingPolicy: sampler,
		Driver:                defaultDriver,
	}
	serverServer := server.New(handler, options)
	return serverServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireDefaultDriverValue = &server.DefaultDriver{}
)

// Injectors from inject_gcp.go:

func SetupGCP(ctx context.Context) (*server.Server, func(), error) {
	resource := ping.New()
	httpsrvResources := &resources{
		ping: resource,
	}
	handler := setupHandler(httpsrvResources)
	stackdriverLogger := sdserver.NewRequestLogger()
	v, cleanup := appHealthChecks()
	credentials, err := gcp.DefaultCredentials(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	projectID, err := gcp.DefaultProjectID(credentials)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	tokenSource := gcp.CredentialsTokenSource(credentials)
	monitoredresourceInterface := monitoredresource.Autodetect()
	exporter, cleanup2, err := sdserver.NewExporter(projectID, tokenSource, monitoredresourceInterface)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	sampler := trace.AlwaysSample()
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         stackdriverLogger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		DefaultSamplingPolicy: sampler,
		Driver:                defaultDriver,
	}
	serverServer := server.New(handler, options)
	return serverServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

// Injectors from inject_local.go:

func SetupLocal(ctx context.Context) (*server.Server, func(), error) {
	resource := ping.New()
	httpsrvResources := &resources{
		ping: resource,
	}
	handler := setupHandler(httpsrvResources)
	logger := _wireLoggerValue
	v, cleanup := appHealthChecks()
	exporter := _wireExporterValue
	sampler := trace.AlwaysSample()
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         logger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		DefaultSamplingPolicy: sampler,
		Driver:                defaultDriver,
	}
	serverServer := server.New(handler, options)
	return serverServer, func() {
		cleanup()
	}, nil
}

var (
	_wireLoggerValue   = requestlog.Logger(nil)
	_wireExporterValue = trace.Exporter(nil)
)
